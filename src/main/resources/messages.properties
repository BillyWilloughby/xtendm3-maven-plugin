ERROR_MESSAGE_FORMAT=\n\
  Error Category: \n\
  {0}\n\n\
  Error Code: \n\
  {1}\n\n\
  Short Description: \n\
  {2}\n\n\
  Long Description: \n\
  {3}\n\n\
  Resolution: \n\
  {4}\n\n\
  Original Cause: \n\
  {5}
## File System Errors
# Error
FILE_EXTENSION_LOOKUP_ERROR=Failed to locate extensions in directory {0}
FILE_EXTENSION_LOOKUP_ERROR_LONG=Expected extensions to be present in the source directory but could not locate any
FILE_EXTENSION_LOOKUP_ERROR_RESOLUTION=Check the source directory to make sure extensions are present. This is a standard\
  Maven directory that should be present in the project.
# Error
FILE_METADATA_NOT_FOUND_ERROR=Could not find any metadata file with names {0} or {1}
FILE_METADATA_NOT_FOUND_ERROR_LONG=Expected metadata file in the resources directory but could not find any
FILE_METADATA_NOT_FOUND_ERROR_RESOLUTION=Add a metadata file to the resources directory that contains extensions metadata\
  using the naming standard mentioned above.
# Error
FILE_METADATA_PARSE_ERROR=Could not parse the metadata file {0}
FILE_METADATA_PARSE_ERROR_LONG=Metadata file is a valid YAML file or does not follow the standard XtendM3 metadata structure
FILE_METADATA_PARSE_ERROR_RESOLUTION=Make sure the metadata file has valid YAML syntax and is following the XtendM3 metadata structure
## Metadata Errors
# Error
METADATA_MISSING=The metadata for {0} {1} is missing
METADATA_MISSING_LONG=Expected metadata for the extension in the metadata file but could locate any
METADATA_MISSING_RESOLUTION=Make sure the metadata file includes the metadata for the extension/api/utility above.
# Error
METADATA_TRIGGER_MISSING=Trigger metadata is missing for extension {0}
METADATA_TRIGGER_MISSING_LONG=Expected trigger metadata for the extension in the metadata file but could locate any
METADATA_TRIGGER_MISSING_RESOLUTION=Make sure the metadata file includes the trigger metadata for the extension above.
# Error
METADATA_TRIGGER_CONFLICT=Found more than one trigger metadata for extension {0}
METADATA_TRIGGER_CONFLICT_LONG=Expected one trigger for the extension but found more than one trigger in metadata file
METADATA_TRIGGER_CONFLICT_RESOLUTION=Make sure the metadata file contains one and only one trigger metadata per extension
# Error
METADATA_TRIGGER_PROPERTY_MISSING=The {0} cannot be found in the trigger metadata for the extension {1}
METADATA_TRIGGER_PROPERTY_MISSING_LONG=Each extension contains trigger metadata that provides information about the trigger. \
  The trigger metadata should be complete for the extension to work
METADATA_TRIGGER_PROPERTY_MISSING_RESOLUTION=Make sure the metadata file contains all trigger metadata for the specified extension
# Error
METADATA_INVALID_PROPERTY_FOR_TRIGGER_TYPE=The {0} is not valid for {1} triggers
METADATA_INVALID_PROPERTY_FOR_TRIGGER_TYPE_LONG=Depending on trigger types, certain metadata applies only to extensions with specific trigger type
METADATA_INVALID_PROPERTY_FOR_TRIGGER_TYPE_RESOLUTION=Remove the invalid metadata for the specified extension from the metadata file
# Error
METADATA_INVALID_PROPERTY_FOR_EXTENSION_TYPE=The {0} is not valid for {1} extensions
METADATA_INVALID_PROPERTY_FOR_EXTENSION_TYPE_LONG=Depending on extension types, certain metadata applies only to extensions with specific extension type
METADATA_INVALID_PROPERTY_FOR_EXTENSION_TYPE_RESOLUTION=Remove the invalid metadata for the specified extension from the metadata file
# Error
METADATA_INVALID_PROPERTY_FOR_PROGRAM_TYPE=The {0} is not valid for extensions hooked on {1} programs
METADATA_INVALID_PROPERTY_FOR_PROGRAM_TYPE_LONG=Depending on program types, certain metadata applies only to extensions hooked on specific program type
METADATA_INVALID_PROPERTY_FOR_PROGRAM_TYPE_RESOLUTION=Remove the invalid metadata for the specified extension from the metadata file
## Code Errors
# Error
CODE_PARSE_ERROR=Could not parse the extension {0}
CODE_PARSE_ERROR_LONG=Expected extension to be a valid Groovy class.
CODE_PARSE_ERROR_RESOLUTION=Make sure that the extension above is a valid Groovy script with correct Groovy/Java syntax
# Error
CODE_UNHANDLED_EXTENSION_TYPE_ERROR=Could not find a suitable analyser for extension type {0}
CODE_UNHANDLED_EXTENSION_TYPE_ERROR_LONG=Expected to have a suitable analyser for the given extension type but failed to locate any
CODE_UNHANDLED_EXTENSION_TYPE_ERROR_RESOLUTION=This is most probably an internal bug. Please report to the XtendM3 project.
# Error
CODE_FORBIDDEN_PACKAGE=Invalid package {0} in extension {1}
CODE_FORBIDDEN_PACKAGE_LONG=Extensions must be in default package only
CODE_FORBIDDEN_PACKAGE_RESOLUTION=Remove the package from the extension.
# Error
CODE_FORBIDDEN_IMPORT=Forbidden import {0} in extension {1}
CODE_FORBIDDEN_IMPORT_LONG=Only certain packages and classes are allowed to use in extensions
CODE_FORBIDDEN_IMPORT_RESOLUTION=Remove the forbidden import from Extension code.
# Error
CODE_FORBIDDEN_INTERFACE=Forbidden implementation of {0} interface(s) in extension {1}
CODE_FORBIDDEN_INTERFACE_LONG=Extension must not implement any interfaces
CODE_FORBIDDEN_INTERFACE_RESOLUTION=Remove interface implementation from extension
# Error
CODE_FORBIDDEN_SUPERTYPE_ERROR=Extension superclass {0} is forbidden. Extension must extend one of {1} superclasses
CODE_FORBIDDEN_SUPERTYPE_ERROR_LONG=Depending on extension type or trigger, only certain APIs are permitted for injection and use
CODE_FORBIDDEN_SUPERTYPE_ERROR_RESOLUTION=Remove the forbidden injections from constructor
# Error
CODE_FORBIDDEN_DECLARATION_ERROR=Forbidden field type(s) {0} in extension {1}
CODE_FORBIDDEN_DECLARATION_ERROR_LONG=Certain field types are not allowed depending on the extension type
CODE_FORBIDDEN_DECLARATION_ERROR_RESOLUTION=Remove disallowed field types from the specified extension
# Error
FORBIDDEN_INJECTION_ERROR=Only parameter types %s can be injected on %s extensions
FORBIDDEN_INJECTION_ERROR_LONG=
FORBIDDEN_INJECTION_ERROR_RESOLUTION=
# Error
CODE_FORBIDDEN_INJECTION_ERROR=Injection of forbidden type(s) {0} in extension constructor. Only {1} are allowed to inject.
CODE_FORBIDDEN_INJECTION_ERROR_LONG=Depending on extension type or trigger, only certain APIs are permitted for injection and use
CODE_FORBIDDEN_INJECTION_ERROR_RESOLUTION=Remove the forbidden injections from constructor
